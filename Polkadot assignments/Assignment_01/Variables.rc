fn main() {
    q1();
    q2();
    q3();
    q4();
    q5();
    q6();
    q7();
    q8();
    q9()
}

// Fix the error below with least amount of modification to the code
fn q1() {
    let x: i32 = 5; //  Solved error by initialising it with 5
    let y: i32; // Uninitialized but also unused, only a Warning !

    assert_eq!(x, 5);
    println!("Success!");
}

// Fill the blanks in the code to make it compile
fn q2() {
    let mut x=1;//Solved by defining X as mutable
    x+=2; 
    
    assert_eq!(x, 3);
    println!("Success!");
}

// Fix the error below with least amount of modification
fn q3() {
    let x: i32 = 10;
     let y: i32 = 5;//Defined  a variable in gloBAL SCOPE
    {
       //let y: i32 = 5;
        println!("The value of x is {} and value of y is {}", x, y);
    }
    println!("The value of x is {} and value of y is {}", x, y); 
}

// Fix the error with the use of define_x
fn q4() {
let x: String = define_x();
    println!("{}, world", x); //Have Doubt Got from solutions
}

fn define_x() -> String {
    let x = String::from("hello");
    x
}

// Only modify `assert_eq!` to make the `println!` work(print `42` in terminal)
fn q5() {
    let x: i32 = 5;
    {
        let x = 12;
        assert_eq!(x, 12);//Locally it is 12
    }

    assert_eq!(x, 5);

    let x =  42;
    println!("{}", x); // Prints "42".
}

// Remove a line in the code to make it compile
fn q6() {
    let mut x: i32 = 1;
    x = 7;
    // Shadowing and re-binding
   // let x = x; Removing this worked
    x += 3;


    let y = 4;
    // Shadowing
    let y = "I can also be bound to text!"; 

    println!("Success!");
}

fn q7() {
    let x = 1; 
     println!("{}", x);//used it
}

// Warning: unused variable: `x`

// Fix the error below with least amount of modification
fn q8() {
    let (mut x, y) = (1, 2);
    x += 2;

    assert_eq!(x, 3);
    assert_eq!(y, 2);

    println!("Success!");
}


fn q9() {
    let (x, y);
    (x,..) = (3, 4);
    [.., y] = [1, 2];
    // Fill the blank to make the code work
    assert_eq!([x,y], [3, 2]);

    println!("Success!");
} 

